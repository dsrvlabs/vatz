// Code generated by mockery v2.13.1. DO NOT EDIT.

package notification

import (
	tp "github.com/dsrvlabs/vatz/manager/types"
	mock "github.com/stretchr/testify/mock"
)

// MockNotification is an autogenerated mock type for the Notification type
type MockNotification struct {
	mock.Mock
}

// SendDiscord provides a mock function with given fields: msg, webhook
func (_m *MockNotification) SendDiscord(msg tp.ReqMsg, webhook string) error {
	ret := _m.Called(msg, webhook)

	var r0 error
	if rf, ok := ret.Get(0).(func(tp.ReqMsg, string) error); ok {
		r0 = rf(msg, webhook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotification provides a mock function with given fields: request
func (_m *MockNotification) SendNotification(request tp.ReqMsg) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(tp.ReqMsg) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockNotification interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNotification creates a new instance of MockNotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNotification(t mockConstructorTestingTNewMockNotification) *MockNotification {
	mock := &MockNotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
