// Code generated by mockery v2.14.0. DO NOT EDIT.

package dispatcher

import (
	types "github.com/dsrvlabs/vatz/manager/types"
	mock "github.com/stretchr/testify/mock"
)

// Dispatcher is an autogenerated mock type for the Dispatcher type
type MockDispatcher struct {
	mock.Mock
}

// SendNotification provides a mock function with given fields: request
func (_m *MockDispatcher) SendNotification(request types.ReqMsg) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ReqMsg) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewDispatcher creates a new instance of Dispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDispatcher(t mockConstructorTestingTNewDispatcher) *MockDispatcher {
	mock := &MockDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func NewMockDispatchers(t mockConstructorTestingTNewDispatcher) []MockDispatcher {
	mock := &MockDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return []MockDispatcher{}
}
