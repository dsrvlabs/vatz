// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/dsrvlabs/vatz/manager/config"

	dispatcher "github.com/dsrvlabs/vatz/manager/dispatcher"

	mock "github.com/stretchr/testify/mock"

	types "github.com/dsrvlabs/vatz/manager/types"

	v1 "github.com/dsrvlabs/vatz-proto/plugin/v1"
)

// HealthCheck is an autogenerated mock type for the HealthCheck type
type HealthCheck struct {
	mock.Mock
}

// PluginHealthCheck provides a mock function with given fields: ctx, gClient, plugin, _a3
func (_m *HealthCheck) PluginHealthCheck(ctx context.Context, gClient v1.PluginClient, plugin config.Plugin, _a3 []dispatcher.Dispatcher) (types.AliveStatus, error) {
	ret := _m.Called(ctx, gClient, plugin, _a3)

	var r0 types.AliveStatus
	if rf, ok := ret.Get(0).(func(context.Context, v1.PluginClient, config.Plugin, []dispatcher.Dispatcher) types.AliveStatus); ok {
		r0 = rf(ctx, gClient, plugin, _a3)
	} else {
		r0 = ret.Get(0).(types.AliveStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1.PluginClient, config.Plugin, []dispatcher.Dispatcher) error); ok {
		r1 = rf(ctx, gClient, plugin, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PluginStatus provides a mock function with given fields: ctx
func (_m *HealthCheck) PluginStatus(ctx context.Context) []types.PluginStatus {
	ret := _m.Called(ctx)

	var r0 []types.PluginStatus
	if rf, ok := ret.Get(0).(func(context.Context) []types.PluginStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PluginStatus)
		}
	}

	return r0
}

// VATZHealthCheck provides a mock function with given fields: schedule, _a1
func (_m *HealthCheck) VATZHealthCheck(schedule []string, _a1 []dispatcher.Dispatcher) error {
	ret := _m.Called(schedule, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, []dispatcher.Dispatcher) error); ok {
		r0 = rf(schedule, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHealthCheck interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthCheck creates a new instance of HealthCheck. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthCheck(t mockConstructorTestingTNewHealthCheck) *HealthCheck {
	mock := &HealthCheck{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
